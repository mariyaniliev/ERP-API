generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  valid     Boolean   @default(true)
  userId    String    @db.Uuid
  userAgent String    @db.VarChar(50)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("sessions")
}

model User {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String         @unique @db.VarChar(50)
  name        String         @db.VarChar(50)
  password    String         @db.VarChar(80)
  enabled     Boolean        @default(false)
  authority   AuthorityTypes @default(User)
  alcohol     AlcoholTypes?
  createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(6)
  phone       String?        @db.VarChar(50)
  discord     String?        @db.VarChar(50)
  birthday    DateTime?      @map("day_of_birth") @db.Timestamptz(6)
  tshirtSize  TshirtSizes?
  leadId      String?        @db.Uuid
  lead        Lead?          @relation("LeadCategory", fields: [leadId], references: [id])
  celebration Celebration[]
  leading     Lead?          @relation("LeadingCategory")
  timeOffs    TimeOff[]

  @@map("users")
}

model Lead {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  userId    String    @unique @db.Uuid
  leadInfo  User      @relation("LeadingCategory", fields: [userId], references: [id], onDelete: Cascade)
  team      User[]    @relation("LeadCategory")

  @@map("leads")
}

model TimeOff {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String       @db.Uuid
  startDate DateTime     @map("start_date") @db.Timestamptz(6)
  endDate   DateTime     @map("end_date") @db.Timestamptz(6)
  approved  Boolean      @default(false)
  uploaded  Boolean      @default(false)
  type      TimeOffTypes
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("timeoffs")
}

model Celebration {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  occasion  OccasionTypes
  startDate DateTime      @map("start_date") @db.Timestamptz(6)
  enabled   Boolean       @default(true)
  userId    String        @db.Uuid
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([startDate])
  @@map("celebrations")
}

enum TshirtSizes {
  XXS
  XS
  S
  M
  L
  XL
  XXL
  XXXL

  @@map("tshirt_sizes")
}

enum TimeOffTypes {
  paid
  unpaid
  sick
  motherhood
  paternity

  @@map("time_off_types")
}

enum OccasionTypes {
  birthday
  nameday
  Other

  @@map("occasion_types")
}

enum AuthorityTypes {
  Admin
  User
  Accounting
  HR

  @@map("authority_types")
}

enum AlcoholTypes {
  Whiskey
  Vodka
  Beer
  Wine
  Rum
  Tequila
  Absinthe
  Gin
  Other

  @@map("alcohol_types")
}
